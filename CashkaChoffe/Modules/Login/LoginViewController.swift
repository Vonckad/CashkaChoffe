//
//  LoginViewController.swift
//  CashkaChoffe
//
//  Created by Vlad Ralovich on 08.02.2024.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import SnapKit

final class LoginViewController: UIViewController {
    
    enum LoginViewControllerState {
        case login, register
        
        var mainButtonTitle: String {
            switch self {
            case .login: return "–í–æ–π—Ç–∏"
            case .register: return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
            }
        }
        
        var title: String {
            switch self {
            case .login: return "–í—Ö–æ–¥"
            case .register: return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
            }
        }
        
        var secondButtonTitle: String {
            switch self {
            case .login: return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
            case .register: return "–í–æ–π—Ç–∏"
            }
        }
        
        /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        mutating func toggle() {
            self = self == .login ? .register : .login
        }
    }
    
    private var state: LoginViewControllerState = .login {
        didSet {
            updateView()
        }
    }
    
    private lazy var stackView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: [emailTextField, passwordTextField, mainButton, secondButton])
        stackView.axis = .vertical
        stackView.spacing = 24
        stackView.distribution = .equalSpacing
        return stackView
    }()
    
    private var emailTextField = TitleTextField(type: .email)
    private var passwordTextField = TitleTextField(type: .password)
    private var retryPasswordTextField = TitleTextField(type: .retryPassword)
    private lazy var mainButton = AppButton(action: #selector(mainButtonAction))
    
    private lazy var secondButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitleColor(.appText, for: .normal)
        button.addTarget(self, action: #selector(secondButtonAction), for: .touchUpInside)
        return button
    }()
    
    private var currentUser: UserModel?

    // MARK: - Public properties -

    var presenter: LoginPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        updateView()
        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(hideKeyboard)))

        NotificationCenter.default.addObserver(self,
            selector: #selector(keyboardWillShow),
            name: UIResponder.keyboardWillShowNotification,
            object: nil
        )
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.navigationBar.titleTextAttributes = [
            NSAttributedString.Key.foregroundColor: UIColor.appText,
            NSAttributedString.Key.font: UIFont.systemFont(ofSize: 18, weight: .bold)]
    }
    
    // MARK: - Private
    @objc
    private func secondButtonAction() {
        state.toggle()
    }
    
    @objc
    private func mainButtonAction() {
        hideKeyboard()
        #warning("–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ø—Ä–µ–∑–µ–Ω—Ç–µ—Ä")
        currentUser = .init(login: "vlad@yandex.ru", password: "12345678")
        guard let currentUser else { return }
        presenter.authAction(isRegister: state == .register, user: currentUser)
    }
    
    @objc
    private func hideKeyboard() {
        view.endEditing(true)
        stackView.snp.remakeConstraints { make in
            make.centerY.equalTo(view)
            make.leading.trailing.equalTo(view).inset(18)
        }
        
        UIView.animate(withDuration: 0.2) {
            self.view.layoutIfNeeded()
        }
    }
    
    @objc 
    private func keyboardWillShow(_ notification: Notification) {
        stackView.snp.remakeConstraints { make in
            make.top.equalTo(view.snp.topMargin).inset(24)
            make.leading.trailing.equalTo(view).inset(18)
        }
        
        UIView.animate(withDuration: 0.2) {
            self.view.layoutIfNeeded()
        }
    }

}

// MARK: - Extensions -

extension LoginViewController: LoginViewInterface {
}

// MARK: - setupView
private extension LoginViewController {
    
    func setupView() {
        view.backgroundColor = .white
        view.addSubview(stackView)
        stackView.snp.makeConstraints { make in
            make.centerY.equalTo(view)
            make.leading.trailing.equalTo(view).inset(18)
        }
    }
    
    func updateView() {
        title = state.title
        mainButton.setTitle(state.mainButtonTitle, for: .normal)
        secondButton.setTitle(state.secondButtonTitle, for: .normal)
        retryPasswordTextField.isHidden = state == .login
        
        switch state {
        case .login:
            stackView.removeArrangedSubview(retryPasswordTextField)
        case .register:
            stackView.insertArrangedSubview(retryPasswordTextField, at: 2)
        }
        
        UIView.animate(withDuration: 0.2) {
            self.view.layoutIfNeeded()
        }
    }
}
